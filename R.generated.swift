// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// Base translation: アメカジ
      /// 
      /// Locales: Base
      static let fashionStyleAmericanCasualTitle = StringResource(key: "FashionStyleAmericanCasualTitle", tableName: "Localizable", locales: ["Base"])
      /// Base translation: ボヘミアン
      /// 
      /// Locales: Base
      static let fashionStyleBohemianTitle = StringResource(key: "FashionStyleBohemianTitle", tableName: "Localizable", locales: ["Base"])
      /// Base translation: カジュアル
      /// 
      /// Locales: Base
      static let fashionStyleCasualTitle = StringResource(key: "FashionStyleCasualTitle", tableName: "Localizable", locales: ["Base"])
      /// Base translation: エスニック系
      /// 
      /// Locales: Base
      static let fashionStyleEthnicTitle = StringResource(key: "FashionStyleEthnicTitle", tableName: "Localizable", locales: ["Base"])
      /// Base translation: フェミニン
      /// 
      /// Locales: Base
      static let fashionStyleFeminineTitle = StringResource(key: "FashionStyleFeminineTitle", tableName: "Localizable", locales: ["Base"])
      /// Base translation: フォーマル
      /// 
      /// Locales: Base
      static let fashionStyleFormalTitle = StringResource(key: "FashionStyleFormalTitle", tableName: "Localizable", locales: ["Base"])
      /// Base translation: 原宿系
      /// 
      /// Locales: Base
      static let fashionStyleHarajukuStyleTitle = StringResource(key: "FashionStyleHarajukuStyleTitle", tableName: "Localizable", locales: ["Base"])
      /// Base translation: ナチュラル系コーデ
      /// 
      /// Locales: Base
      static let fashionStyleNaturalStyleTitle = StringResource(key: "FashionStyleNaturalStyleTitle", tableName: "Localizable", locales: ["Base"])
      
      /// Base translation: アメカジ
      /// 
      /// Locales: Base
      static func fashionStyleAmericanCasualTitle(_: Void) -> String {
        return NSLocalizedString("FashionStyleAmericanCasualTitle", comment: "")
      }
      
      /// Base translation: ボヘミアン
      /// 
      /// Locales: Base
      static func fashionStyleBohemianTitle(_: Void) -> String {
        return NSLocalizedString("FashionStyleBohemianTitle", comment: "")
      }
      
      /// Base translation: カジュアル
      /// 
      /// Locales: Base
      static func fashionStyleCasualTitle(_: Void) -> String {
        return NSLocalizedString("FashionStyleCasualTitle", comment: "")
      }
      
      /// Base translation: エスニック系
      /// 
      /// Locales: Base
      static func fashionStyleEthnicTitle(_: Void) -> String {
        return NSLocalizedString("FashionStyleEthnicTitle", comment: "")
      }
      
      /// Base translation: フェミニン
      /// 
      /// Locales: Base
      static func fashionStyleFeminineTitle(_: Void) -> String {
        return NSLocalizedString("FashionStyleFeminineTitle", comment: "")
      }
      
      /// Base translation: フォーマル
      /// 
      /// Locales: Base
      static func fashionStyleFormalTitle(_: Void) -> String {
        return NSLocalizedString("FashionStyleFormalTitle", comment: "")
      }
      
      /// Base translation: 原宿系
      /// 
      /// Locales: Base
      static func fashionStyleHarajukuStyleTitle(_: Void) -> String {
        return NSLocalizedString("FashionStyleHarajukuStyleTitle", comment: "")
      }
      
      /// Base translation: ナチュラル系コーデ
      /// 
      /// Locales: Base
      static func fashionStyleNaturalStyleTitle(_: Void) -> String {
        return NSLocalizedString("FashionStyleNaturalStyleTitle", comment: "")
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.yurihasuike.Macaron") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let contentListViewController = StoryboardViewControllerResource<ContentListViewController>(identifier: "ContentListViewController")
      let name = "Main"
      let walkthroughViewController = StoryboardViewControllerResource<WalkthroughViewController>(identifier: "WalkthroughViewController")
      
      func contentListViewController(_: Void) -> ContentListViewController? {
        return UIStoryboard(resource: self).instantiateViewController(contentListViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().walkthroughViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'walkthroughViewController' could not be loaded from storyboard 'Main' as 'WalkthroughViewController'.") }
        if _R.storyboard.main().contentListViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'contentListViewController' could not be loaded from storyboard 'Main' as 'ContentListViewController'.") }
      }
      
      func walkthroughViewController(_: Void) -> WalkthroughViewController? {
        return UIStoryboard(resource: self).instantiateViewController(walkthroughViewController)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}